import asyncio
import aiohttp
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from config import (
    BOT_TOKEN, 
    WEATHER_API_URL, 
    MESSAGES, 
    BOT_NAME
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def get_weather_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ OpenWeatherMap API
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return None


def format_weather_message(weather_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        temp = round(weather_data['main']['temp'])
        feels_like = round(weather_data['main']['feels_like'])
        description = weather_data['weather'][0]['description'].title()
        wind_speed = weather_data['wind']['speed']
        humidity = weather_data['main']['humidity']
        pressure = round(weather_data['main']['pressure'] * 0.750062)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–º —Ä—Ç.—Å—Ç.
        visibility = round(weather_data['visibility'] / 1000)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–º
        
        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
        
        return MESSAGES['weather_format'].format(
            temp=temp,
            feels_like=feels_like,
            description=description,
            wind_speed=wind_speed,
            humidity=humidity,
            pressure=pressure,
            visibility=visibility,
            time=current_time
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return MESSAGES['weather_error']


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer(
        MESSAGES['start'].format(bot_name=BOT_NAME),
        parse_mode="HTML"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    await message.answer(
        MESSAGES['help'],
        parse_mode="HTML"
    )


@dp.message(Command("weather"))
async def cmd_weather(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer("üå§Ô∏è –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    weather_data = await get_weather_data()
    
    if weather_data:
        weather_message = format_weather_message(weather_data)
        await loading_msg.edit_text(weather_message, parse_mode="HTML")
    else:
        await loading_msg.edit_text(MESSAGES['weather_error'], parse_mode="HTML")


@dp.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="HTML"
    )


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
