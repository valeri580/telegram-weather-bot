import asyncio
import aiohttp
import logging
import os
import io
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, PhotoSize, FSInputFile
from deep_translator import GoogleTranslator
from gtts import gTTS
import tempfile
from config import (
    BOT_TOKEN, 
    WEATHER_API_URL, 
    MESSAGES, 
    BOT_NAME
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = GoogleTranslator(source='ru', target='en')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('img'):
    os.makedirs('img')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


async def get_weather_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ OpenWeatherMap API
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return None


def format_weather_message(weather_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        temp = round(weather_data['main']['temp'])
        feels_like = round(weather_data['main']['feels_like'])
        description = weather_data['weather'][0]['description'].title()
        wind_speed = weather_data['wind']['speed']
        humidity = weather_data['main']['humidity']
        pressure = round(weather_data['main']['pressure'] * 0.750062)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–º —Ä—Ç.—Å—Ç.
        visibility = round(weather_data['visibility'] / 1000)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–º
        
        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
        
        return MESSAGES['weather_format'].format(
            temp=temp,
            feels_like=feels_like,
            description=description,
            wind_speed=wind_speed,
            humidity=humidity,
            pressure=pressure,
            visibility=visibility,
            time=current_time
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return MESSAGES['weather_error']


async def save_photo(message: Message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"photo_{timestamp}_{photo.file_id[:8]}.jpg"
        save_path = os.path.join('img', filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, save_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(save_path)
        
        return {
            'success': True,
            'filename': filename,
            'file_size': file_size,
            'save_path': save_path
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        return {'success': False, 'error': str(e)}


async def create_voice_message(text: str):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ogg
        temp_path = tempfile.mktemp(suffix='.ogg')
        
        # –°–æ–∑–¥–∞–µ–º TTS –æ–±—ä–µ–∫—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        tts = gTTS(text=text, lang='ru', slow=False)
        tts.save(temp_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if not os.path.exists(temp_path):
            return {'success': False, 'error': '–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω'}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(temp_path)
        
        if file_size == 0:
            return {'success': False, 'error': '–§–∞–π–ª –ø—É—Å—Ç–æ–π'}
        
        return {
            'success': True,
            'file_path': temp_path,
            'file_size': file_size
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {'success': False, 'error': str(e)}


def translate_text(text: str):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    """
    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
        translated = translator.translate(text)
        return {
            'success': True,
            'original_text': text,
            'translated_text': translated
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return {'success': False, 'error': str(e)}


async def send_random_photo(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
    """
    try:
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ
        test_photos = [
            'test_photos/photo1.jpg',
            'test_photos/photo2.jpg', 
            'test_photos/photo3.jpg'
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
        random_photo = random.choice(test_photos)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(random_photo):
            return False, f"–§–∞–π–ª {random_photo} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        photo = FSInputFile(random_photo)
        await message.answer_photo(
            photo=photo,
            caption=f"üì∏ –°–ª—É—á–∞–π–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ: {os.path.basename(random_photo)}"
        )
        
        return True, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {os.path.basename(random_photo)}"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
        return False, str(e)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    start_message = f"""
üå§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/weather - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ú–æ—Å–∫–≤–µ
/voice - –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/translate <—Ç–µ–∫—Å—Ç> - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
/photo - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:
üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ - —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ
    """
    await message.answer(start_message)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_message = """
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/weather - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ú–æ—Å–∫–≤–µ
/voice - –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/translate <—Ç–µ–∫—Å—Ç> - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
/photo - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ

üì∏ –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É img/
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voice –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /translate –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

–ü—Ä–∏–º–µ—Ä—ã:
/voice (–∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç)
/translate –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?
/photo
    """
    await message.answer(help_message)


@dp.message(Command("weather"))
async def cmd_weather(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer("üå§Ô∏è –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    weather_data = await get_weather_data()
    
    if weather_data:
        weather_message = format_weather_message(weather_data)
        await loading_msg.edit_text(weather_message)
    else:
        await loading_msg.edit_text(MESSAGES['weather_error'])


@dp.message(Command("voice"))
async def cmd_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /voice - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_for_voice_text'
    
    await message.answer(
        "üé§ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å:\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è —Å–æ–∑–¥–∞–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )


@dp.message(Command("translate"))
async def cmd_translate(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.replace('/translate', '').strip()
    
    if not text:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n–ü—Ä–∏–º–µ—Ä: /translate –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ
    loading_msg = await message.answer("üåç –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    translation_result = translate_text(text)
    
    if translation_result['success']:
        await loading_msg.edit_text(
            MESSAGES['translation'].format(
                original_text=translation_result['original_text'],
                translated_text=translation_result['translated_text']
            )
        )
    else:
        await loading_msg.edit_text(MESSAGES['translation_error'])


@dp.message(Command("photo"))
async def cmd_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /photo - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
    success, result = await send_random_photo(message)
    
    if success:
        await loading_msg.edit_text(f"‚úÖ {result}")
    else:
        await loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result}")


@dp.message(lambda message: message.photo is not None)
async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    loading_msg = await message.answer("üì∏ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    save_result = await save_photo(message)
    
    if save_result['success']:
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
        await loading_msg.edit_text(
            MESSAGES['photo_saved'].format(
                filename=save_result['filename'],
                file_size=save_result['file_size'],
                time=current_time
            ),
        )
    else:
        await loading_msg.edit_text(MESSAGES['photo_error'])


@dp.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if text.startswith('/'):
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states and user_states[user_id] == 'waiting_for_voice_text':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_states[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        loading_msg = await message.answer("üé§ –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_result = await create_voice_message(text)
        
        if voice_result['success']:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_file = FSInputFile(voice_result['file_path'])
                await message.answer_voice(
                    voice=voice_file,
                    caption=f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
                await loading_msg.edit_text(
                    MESSAGES['voice_sent'].format(
                        text=text,
                        duration=len(text) // 10 + 1  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    ) + f"\nüïê –í—Ä–µ–º—è: {current_time}"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await loading_msg.edit_text(MESSAGES['voice_error'])
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(voice_result['file_path'])
                except:
                    pass
        else:
            await loading_msg.edit_text(MESSAGES['voice_error'])
        
        return
    
    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    await message.answer(
        "üí¨ –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /translate\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voice\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n/translate –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\n/voice"
    )


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
